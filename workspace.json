{
  "configuration" : {
    "scope" : "SoftwareSystem"
  },
  "description" : "Description",
  "documentation" : {
    "decisions" : [ {
      "content" : "# 1. Record architecture decisions\n\nDate: 2025-07-03\n\n## Status\n\nAccepted\n\n## Context\n\nWe need to record the architectural decisions made on this project.\n\n## Decision\n\nWe will use Architecture Decision Records, as [described by Michael Nygard](http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions).\n\n## Consequences\n\nSee Michael Nygard's article, linked above. For a lightweight ADR toolset, see Nat Pryce's [adr-tools](https://github.com/npryce/adr-tools).\n",
      "date" : "2025-07-03T00:00:00Z",
      "format" : "Markdown",
      "id" : "1",
      "status" : "Accepted",
      "title" : "Record architecture decisions"
    }, {
      "content" : "# 2. Use Markdown instead of AsciiDoc for documentation\n\nDate: 2025-07-03\n\n## Status\n\nAccepted\n\n## Context\n\nWe need a markup language for our documentation system that supports:\n\n- Wide ecosystem support and tooling\n- Simple syntax for quick adoption\n- Integration with modern development workflows\n- Support for presentations, technical docs, and knowledge management\n- Compatibility with GitHub, VS Code, and other developer tools\n\nThe main alternatives considered were:\n\n- **Markdown** - Simple, widely adopted markup language\n- **AsciiDoc** - More feature-rich but complex markup language\n- **reStructuredText** - Python ecosystem standard\n- **Plain text** - Too limited for rich content\n\n## Decision\n\nWe will use **Markdown** as our primary markup language for all documentation.\n\n## Consequences\n\n### Positive\n\n- **Universal support**: Markdown is supported natively by GitHub, GitLab, VS\n  Code, and virtually all modern development tools\n- **Low learning curve**: Simple syntax that new team members can learn quickly\n- **Rich ecosystem**: Extensive tooling available including:\n  - Marp for presentations\n  - Dendron for knowledge management\n  - Pandoc for format conversion\n  - Mermaid for diagrams\n- **Lightweight**: Fast to write and process\n- **Version control friendly**: Plain text that diffs well in Git\n- **Multi-purpose**: Works for docs, presentations, notes, and websites\n\n### Negative\n\n- **Limited advanced features**: Lacks some advanced formatting options of\n  AsciiDoc\n- **Inconsistent standards**: Different flavors (CommonMark, GitHub Flavored\n  Markdown, etc.)\n- **Table limitations**: Complex tables are harder to create than in AsciiDoc\n\n### Mitigation\n\n- Use CommonMark standard where possible for consistency\n- Leverage HTML embedding when advanced formatting is needed\n- Use Mermaid for complex diagrams instead of ASCII art\n- Supplement with tooling (Prettier, linters) for consistent formatting\n\n## References\n\n- [CommonMark Specification](https://commonmark.org/)\n- [GitHub Flavored Markdown Spec](https://github.github.com/gfm/)\n- [Marp for Presentations](https://marp.app/)\n- [Dendron Documentation](https://www.dendron.so/)\n",
      "date" : "2025-07-03T00:00:00Z",
      "format" : "Markdown",
      "id" : "2",
      "status" : "Accepted",
      "title" : "Use Markdown instead of AsciiDoc for documentation"
    }, {
      "content" : "# 3. Use Dendron for knowledge management over other frameworks\n\nDate: 2025-07-03\n\n## Status\n\nAccepted\n\n## Context\n\nWe need a knowledge management system that supports software engineering teams\nin:\n\n- Organizing hierarchical technical documentation\n- Linking related concepts and decisions\n- Supporting both individual and team knowledge sharing\n- Integrating with existing development workflows\n- Scaling with growing documentation needs\n- Supporting both structured documentation and free-form notes\n\nThe main alternatives considered were:\n\n- **Dendron** - Hierarchical note-taking with VS Code integration\n- **Obsidian** - Graph-based knowledge management\n- **Notion** - All-in-one workspace with databases\n- **GitBook** - Documentation-focused platform\n- **TiddlyWiki** - Non-linear documentation system\n- **Roam Research** - Bi-directional linking notes\n- **Plain file system** - Simple directory structure with markdown files\n\n## Decision\n\nWe will use **Dendron** as our primary knowledge management framework.\n\n## Consequences\n\n### Positive\n\n- **Hierarchical organization**: Natural fit for technical documentation with\n  clear structure (e.g., `project.backend.api.authentication`)\n- **VS Code integration**: Seamless integration with our primary development\n  environment\n- **Schema support**: Structured templates for consistent documentation (ADRs,\n  runbooks, etc.)\n- **Lookup and navigation**: Fast search and navigation with fuzzy matching\n- **Linking and references**: Automatic backlinks and reference tracking\n- **Publishing capabilities**: Can generate static sites from documentation\n- **Markdown-native**: Works with our existing markdown toolchain\n- **Developer-friendly**: Git-based workflow that developers understand\n- **Extensible**: Rich plugin ecosystem and customization options\n\n### Negative\n\n- **Learning curve**: Team needs to learn Dendron conventions and commands\n- **VS Code dependency**: Requires VS Code for optimal experience\n- **File proliferation**: Can generate many files that need organization\n- **Less visual**: Not as graphically rich as Obsidian or Roam Research\n- **Smaller community**: Less widespread adoption than some alternatives\n\n### Mitigation\n\n- Provide team training on Dendron workflows and best practices\n- Document our Dendron conventions and schemas\n- Use schemas to enforce consistent structure\n- Regular maintenance to prune unused or outdated notes\n- Backup and export strategies to avoid vendor lock-in\n\n## Implementation\n\n- Set up Dendron workspace in VS Code\n- Create schemas for common documentation types (ADRs, runbooks, meeting notes)\n- Establish naming conventions for hierarchical organization\n- Configure daily notes for team knowledge capture\n- Set up publishing pipeline for external documentation sharing\n\n## References\n\n- [Dendron Documentation](https://www.dendron.so/)\n- [Dendron vs Obsidian Comparison](https://wiki.dendron.so/notes/8pg3zx3j2r0eqs7i7wzaojk/)\n- [Building a Second Brain methodology](https://www.buildingasecondbrain.com/)\n- [ADR-0002: Use Markdown instead of AsciiDoc](./#2)\n",
      "date" : "2025-07-03T00:00:00Z",
      "format" : "Markdown",
      "id" : "3",
      "status" : "Accepted",
      "title" : "Use Dendron for knowledge management over other frameworks"
    } ],
    "sections" : [ {
      "content" : "# System Architecture Overview\n\n## Introduction\n\nThis document provides a comprehensive overview of the software system\narchitecture as visualized through Structurizr. The system demonstrates the\nrelationships between users, software systems, and their internal components.\n\n## System Landscape\n\n### Stakeholders\n\n#### Users\n\n- **Primary Actor**: End users who interact with the software system\n- **Role**: Consumers of the system's functionality and services\n- **Interaction Pattern**: Direct usage through the web application interface\n\n### Software Systems\n\n#### Main Software System\n\nThe core software system provides the primary business functionality and\nconsists of multiple containers working together to deliver value to users.\n\n**Key Characteristics:**\n\n- Web-based architecture\n- Data persistence layer\n- User-facing interface\n- Scalable container-based design\n\n## Container Architecture\n\n### Web Application Container\n\n- **Purpose**: Primary user interface and application logic\n- **Technology**: Web-based application framework\n- **Responsibilities**:\n  - User authentication and session management\n  - Business logic processing\n  - API endpoints for client interactions\n  - User interface rendering\n\n### Database Container\n\n- **Purpose**: Data persistence and management\n- **Type**: Database system (tagged as \"Database\")\n- **Responsibilities**:\n  - Data storage and retrieval\n  - Data integrity and consistency\n  - Query processing and optimization\n  - Backup and recovery capabilities\n\n## System Interactions\n\n### User → Web Application\n\n- **Relationship**: \"Uses\"\n- **Description**: Users interact directly with the web application to access\n  system functionality\n- **Interface**: HTTP/HTTPS web interface\n- **Authentication**: Required for secure access\n\n### Web Application → Database\n\n- **Relationship**: \"Reads from and writes to\"\n- **Description**: Bidirectional data flow for persistence operations\n- **Operations**:\n  - **Read Operations**: Data retrieval, queries, reporting\n  - **Write Operations**: Data creation, updates, deletions\n- **Protocol**: Database-specific connection protocols\n\n## Architectural Principles\n\n### Design Patterns\n\n- **Separation of Concerns**: Clear separation between presentation, business\n  logic, and data layers\n- **Container-Based Architecture**: Modular design with distinct\n  responsibilities\n- **Database Abstraction**: Isolated data layer for flexibility and\n  maintainability\n\n### Quality Attributes\n\n- **Scalability**: Container-based design supports horizontal scaling\n- **Maintainability**: Clear separation of responsibilities\n- **Security**: User authentication and data protection\n- **Reliability**: Robust data persistence layer\n\n## Visual Representation\n\n### System Context Diagram (Diagram1)\n\n- **View Type**: System Context\n- **Layout**: Left-to-right auto-layout\n- **Scope**: Shows the software system in relation to its users\n- **Purpose**: High-level overview of system boundaries and external\n  interactions\n\n### Container Diagram (Diagram2)\n\n- **View Type**: Container View\n- **Layout**: Left-to-right auto-layout\n- **Scope**: Internal structure of the software system\n- **Purpose**: Detailed view of system components and their relationships\n\n## Styling and Visual Design\n\n### Color Scheme\n\n- **Users/People**: Red background (#d34407) with person shape\n- **Software Systems**: Orange background (#f86628)\n- **Containers**: Light orange background (#f88728)\n- **Database Elements**: Cylinder shape for visual distinction\n- **Text**: White text (#ffffff) for contrast and readability\n\n### Visual Conventions\n\n- **Shape Coding**: Different shapes represent different element types\n- **Color Coding**: Consistent color scheme for element categories\n- **Auto-layout**: Automatic positioning for clear relationship visualization\n\n## Demo Points for Structurizr\n\n### Key Features to Showcase\n\n1. **Interactive Diagrams**: Click through different views (System Context →\n   Container)\n2. **Visual Hierarchy**: Clear representation of system boundaries and\n   relationships\n3. **Documentation Integration**: Embedded documentation accessible from\n   diagrams\n4. **Responsive Design**: Auto-layout adapts to content changes\n5. **Export Capabilities**: Generate diagrams in multiple formats\n\n### Demonstration Flow\n\n1. **Start with System Context**: Show high-level user-system relationship\n2. **Drill Down to Containers**: Reveal internal system structure\n3. **Highlight Relationships**: Demonstrate data flow and interactions\n4. **Show Documentation**: Access embedded documentation from diagram elements\n5. **Export Options**: Generate PNG/SVG for presentations or documentation\n\n## Technical Implementation\n\n### Structurizr Configuration\n\n- **Scope**: Software System level\n- **Identifier Strategy**: Hierarchical naming\n- **Documentation Path**: `doc/` directory\n- **ADR Integration**: `doc/adr/` for architecture decisions\n\n### File Structure\n\n```\ndoc/\n├── system-overview.md (this file)\n└── adr/\n    ├── 0001-record-architecture-decisions.md\n    ├── 0002-use-markdown-instead-of-asciidoc-for-documentation.md\n    └── 0003-use-dendron-for-knowledge-management-over-other-frameworks.md\n```\n\n## Next Steps\n\n### Potential Enhancements\n\n1. **Add more containers**: API Gateway, Cache Layer, Message Queue\n2. **Include deployment views**: Show infrastructure and environments\n3. **Add dynamic views**: Demonstrate user journeys and system workflows\n4. **Expand documentation**: Add component-level details and interfaces\n\n### Integration Opportunities\n\n- **CI/CD Integration**: Automatic diagram generation on code changes\n- **Team Collaboration**: Shared understanding through visual architecture\n- **Decision Documentation**: Link ADRs to specific system components\n- **Onboarding**: Use diagrams for new team member orientation\n\n---\n\n_This document is maintained as part of the system's architecture documentation\nand should be updated as the system evolves._\n",
      "filename" : "system-overview.md",
      "format" : "Markdown",
      "order" : 1,
      "title" : ""
    } ]
  },
  "id" : 1,
  "lastModifiedAgent" : "structurizr-ui",
  "lastModifiedDate" : "2025-07-03T01:01:55Z",
  "model" : {
    "people" : [ {
      "id" : "1",
      "location" : "Unspecified",
      "name" : "User",
      "properties" : {
        "structurizr.dsl.identifier" : "u"
      },
      "relationships" : [ {
        "description" : "Uses",
        "destinationId" : "3",
        "id" : "5",
        "sourceId" : "1",
        "tags" : "Relationship"
      }, {
        "description" : "Uses",
        "destinationId" : "2",
        "id" : "6",
        "linkedRelationshipId" : "5",
        "sourceId" : "1"
      } ],
      "tags" : "Element,Person"
    } ],
    "softwareSystems" : [ {
      "containers" : [ {
        "documentation" : { },
        "id" : "3",
        "name" : "Web Application",
        "properties" : {
          "structurizr.dsl.identifier" : "ss.wa"
        },
        "relationships" : [ {
          "description" : "Reads from and writes to",
          "destinationId" : "4",
          "id" : "7",
          "sourceId" : "3",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container"
      }, {
        "documentation" : { },
        "id" : "4",
        "name" : "Database Schema",
        "properties" : {
          "structurizr.dsl.identifier" : "ss.db"
        },
        "tags" : "Element,Container,Database"
      } ],
      "documentation" : { },
      "id" : "2",
      "location" : "Unspecified",
      "name" : "Software System",
      "properties" : {
        "structurizr.dsl.identifier" : "ss"
      },
      "tags" : "Element,Software System"
    } ]
  },
  "name" : "Name",
  "properties" : {
    "structurizr.dsl" : "d29ya3NwYWNlICJOYW1lIiAiRGVzY3JpcHRpb24iIHsKICAgICFkb2NzIGRvYy8KICAgICFhZHJzIGRvYy9hZHIvCiAgICAhaWRlbnRpZmllcnMgaGllcmFyY2hpY2FsCgogICAgbW9kZWwgewogICAgICAgIHUgPSBwZXJzb24gIlVzZXIiCiAgICAgICAgc3MgPSBzb2Z0d2FyZVN5c3RlbSAiU29mdHdhcmUgU3lzdGVtIiB7CiAgICAgICAgICAgIHdhID0gY29udGFpbmVyICJXZWIgQXBwbGljYXRpb24iCiAgICAgICAgICAgIGRiID0gY29udGFpbmVyICJEYXRhYmFzZSBTY2hlbWEiIHsKICAgICAgICAgICAgICAgIHRhZ3MgIkRhdGFiYXNlIgogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB1IC0+IHNzLndhICJVc2VzIgogICAgICAgIHNzLndhIC0+IHNzLmRiICJSZWFkcyBmcm9tIGFuZCB3cml0ZXMgdG8iCiAgICB9CgogICAgdmlld3MgewogICAgICAgIHN5c3RlbUNvbnRleHQgc3MgIkRpYWdyYW0xIiB7CiAgICAgICAgICAgIGluY2x1ZGUgKgogICAgICAgICAgICBhdXRvbGF5b3V0IGxyCiAgICAgICAgfQoKICAgICAgICBjb250YWluZXIgc3MgIkRpYWdyYW0yIiB7CiAgICAgICAgICAgIGluY2x1ZGUgKgogICAgICAgICAgICBhdXRvbGF5b3V0IGxyCiAgICAgICAgfQoKICAgICAgICBzdHlsZXMgewogICAgICAgICAgICBlbGVtZW50ICJFbGVtZW50IiB7CiAgICAgICAgICAgICAgICBjb2xvciAjZmZmZmZmCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxlbWVudCAiUGVyc29uIiB7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kICNkMzQ0MDcKICAgICAgICAgICAgICAgIHNoYXBlIHBlcnNvbgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsZW1lbnQgIlNvZnR3YXJlIFN5c3RlbSIgewogICAgICAgICAgICAgICAgYmFja2dyb3VuZCAjZjg2NjI4CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxlbWVudCAiQ29udGFpbmVyIiB7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kICNmODg3MjgKICAgICAgICAgICAgfQogICAgICAgICAgICBlbGVtZW50ICJEYXRhYmFzZSIgewogICAgICAgICAgICAgICAgc2hhcGUgY3lsaW5kZXIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBjb25maWd1cmF0aW9uIHsKICAgICAgICBzY29wZSBzb2Z0d2FyZXN5c3RlbQogICAgfQoKfQ=="
  },
  "views" : {
    "configuration" : {
      "branding" : { },
      "lastSavedView" : "Diagram1",
      "metadataSymbols" : "SquareBrackets",
      "styles" : {
        "elements" : [ {
          "color" : "#ffffff",
          "tag" : "Element"
        }, {
          "background" : "#d34407",
          "shape" : "Person",
          "tag" : "Person"
        }, {
          "background" : "#f86628",
          "tag" : "Software System"
        }, {
          "background" : "#f88728",
          "tag" : "Container"
        }, {
          "shape" : "Cylinder",
          "tag" : "Database"
        } ]
      },
      "terminology" : { }
    },
    "containerViews" : [ {
      "automaticLayout" : {
        "applied" : false,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "LeftRight",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "elements" : [ {
        "id" : "1",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "3",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "4",
        "x" : 0,
        "y" : 0
      } ],
      "externalSoftwareSystemBoundariesVisible" : false,
      "key" : "Diagram2",
      "order" : 2,
      "relationships" : [ {
        "id" : "5"
      }, {
        "id" : "7"
      } ],
      "softwareSystemId" : "2"
    } ],
    "systemContextViews" : [ {
      "automaticLayout" : {
        "applied" : true,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "LeftRight",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "dimensions" : {
        "height" : 800,
        "width" : 1550
      },
      "elements" : [ {
        "id" : "1",
        "x" : 199,
        "y" : 165
      }, {
        "id" : "2",
        "x" : 899,
        "y" : 215
      } ],
      "enterpriseBoundaryVisible" : true,
      "key" : "Diagram1",
      "order" : 1,
      "relationships" : [ {
        "id" : "6"
      } ],
      "softwareSystemId" : "2"
    } ]
  }
}